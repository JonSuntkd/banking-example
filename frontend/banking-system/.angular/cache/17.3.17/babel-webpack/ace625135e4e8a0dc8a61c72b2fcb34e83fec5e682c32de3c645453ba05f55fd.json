{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\n/**\n * Client Use Cases following Single Responsibility Principle\n * Each method handles a specific business operation\n */\nlet ClientUseCases = class ClientUseCases {\n  constructor(clientRepository) {\n    this.clientRepository = clientRepository;\n  }\n  /**\n   * Create a new client with basic information\n   */\n  createBasicClient(clientData) {\n    this.validateClientBasicData(clientData);\n    return this.clientRepository.createBasicClient(clientData);\n  }\n  /**\n   * Retrieve all clients from the system\n   */\n  getAllClients() {\n    return this.clientRepository.getAllClients();\n  }\n  /**\n   * Retrieve a specific client by ID\n   */\n  getClientById(id) {\n    this.validateId(id);\n    return this.clientRepository.getClientById(id);\n  }\n  /**\n   * Update an existing client's information\n   */\n  updateClient(id, clientData) {\n    this.validateId(id);\n    this.validateClientUpdateData(clientData);\n    return this.clientRepository.updateClient(id, clientData);\n  }\n  /**\n   * Activate a client account\n   */\n  activateClient(id) {\n    this.validateId(id);\n    return this.clientRepository.activateClient(id);\n  }\n  /**\n   * Deactivate a client account\n   */\n  deactivateClient(id) {\n    this.validateId(id);\n    return this.clientRepository.deactivateClient(id);\n  }\n  /**\n   * Delete a client from the system\n   */\n  deleteClient(id) {\n    this.validateId(id);\n    return this.clientRepository.deleteClient(id);\n  }\n  // Private validation methods following Clean Code principles\n  validateId(id) {\n    if (!id || id <= 0) {\n      throw new Error('Invalid client ID provided');\n    }\n  }\n  validateClientBasicData(data) {\n    if (!data.fullName?.trim()) {\n      throw new Error('Full name is required');\n    }\n    if (!data.address?.trim()) {\n      throw new Error('Address is required');\n    }\n    if (!data.phone?.trim()) {\n      throw new Error('Phone is required');\n    }\n    if (!data.password?.trim()) {\n      throw new Error('Password is required');\n    }\n    if (data.password.length < 6) {\n      throw new Error('Password must be at least 6 characters long');\n    }\n  }\n  validateClientUpdateData(data) {\n    if (!data.person?.fullName?.trim()) {\n      throw new Error('Full name is required');\n    }\n    if (!data.person?.address?.trim()) {\n      throw new Error('Address is required');\n    }\n    if (!data.person?.phone?.trim()) {\n      throw new Error('Phone is required');\n    }\n    if (!data.password?.trim()) {\n      throw new Error('Password is required');\n    }\n  }\n};\nClientUseCases = __decorate([Injectable({\n  providedIn: 'root'\n})], ClientUseCases);\nexport { ClientUseCases };","map":{"version":3,"names":["Injectable","ClientUseCases","constructor","clientRepository","createBasicClient","clientData","validateClientBasicData","getAllClients","getClientById","id","validateId","updateClient","validateClientUpdateData","activateClient","deactivateClient","deleteClient","Error","data","fullName","trim","address","phone","password","length","person","__decorate","providedIn"],"sources":["C:\\Users\\familia\\Documents\\gitpro\\banking-example\\frontend\\banking-system\\src\\app\\application\\use-cases\\client.use-cases.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ClientRepository } from '@domain/repositories/client.repository';\r\nimport { Client, ClientBasicDto, ClientUpdateDto } from '@domain/entities/client.entity';\r\n\r\n/**\r\n * Client Use Cases following Single Responsibility Principle\r\n * Each method handles a specific business operation\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClientUseCases {\r\n  constructor(private readonly clientRepository: ClientRepository) {}\r\n\r\n  /**\r\n   * Create a new client with basic information\r\n   */\r\n  createBasicClient(clientData: ClientBasicDto): Observable<Client> {\r\n    this.validateClientBasicData(clientData);\r\n    return this.clientRepository.createBasicClient(clientData);\r\n  }\r\n\r\n  /**\r\n   * Retrieve all clients from the system\r\n   */\r\n  getAllClients(): Observable<Client[]> {\r\n    return this.clientRepository.getAllClients();\r\n  }\r\n\r\n  /**\r\n   * Retrieve a specific client by ID\r\n   */\r\n  getClientById(id: number): Observable<Client> {\r\n    this.validateId(id);\r\n    return this.clientRepository.getClientById(id);\r\n  }\r\n\r\n  /**\r\n   * Update an existing client's information\r\n   */\r\n  updateClient(id: number, clientData: ClientUpdateDto): Observable<Client> {\r\n    this.validateId(id);\r\n    this.validateClientUpdateData(clientData);\r\n    return this.clientRepository.updateClient(id, clientData);\r\n  }\r\n\r\n  /**\r\n   * Activate a client account\r\n   */\r\n  activateClient(id: number): Observable<void> {\r\n    this.validateId(id);\r\n    return this.clientRepository.activateClient(id);\r\n  }\r\n\r\n  /**\r\n   * Deactivate a client account\r\n   */\r\n  deactivateClient(id: number): Observable<void> {\r\n    this.validateId(id);\r\n    return this.clientRepository.deactivateClient(id);\r\n  }\r\n\r\n  /**\r\n   * Delete a client from the system\r\n   */\r\n  deleteClient(id: number): Observable<void> {\r\n    this.validateId(id);\r\n    return this.clientRepository.deleteClient(id);\r\n  }\r\n\r\n  // Private validation methods following Clean Code principles\r\n  private validateId(id: number): void {\r\n    if (!id || id <= 0) {\r\n      throw new Error('Invalid client ID provided');\r\n    }\r\n  }\r\n\r\n  private validateClientBasicData(data: ClientBasicDto): void {\r\n    if (!data.fullName?.trim()) {\r\n      throw new Error('Full name is required');\r\n    }\r\n    if (!data.address?.trim()) {\r\n      throw new Error('Address is required');\r\n    }\r\n    if (!data.phone?.trim()) {\r\n      throw new Error('Phone is required');\r\n    }\r\n    if (!data.password?.trim()) {\r\n      throw new Error('Password is required');\r\n    }\r\n    if (data.password.length < 6) {\r\n      throw new Error('Password must be at least 6 characters long');\r\n    }\r\n  }\r\n\r\n  private validateClientUpdateData(data: ClientUpdateDto): void {\r\n    if (!data.person?.fullName?.trim()) {\r\n      throw new Error('Full name is required');\r\n    }\r\n    if (!data.person?.address?.trim()) {\r\n      throw new Error('Address is required');\r\n    }\r\n    if (!data.person?.phone?.trim()) {\r\n      throw new Error('Phone is required');\r\n    }\r\n    if (!data.password?.trim()) {\r\n      throw new Error('Password is required');\r\n    }\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}