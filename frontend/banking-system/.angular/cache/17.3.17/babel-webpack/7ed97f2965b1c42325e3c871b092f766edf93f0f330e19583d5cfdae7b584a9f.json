{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\n/**\n * Client Use Cases - Simplified version for demo\n */\nexport class ClientUseCases {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8001/api/v1/client';\n  }\n  /**\n   * Create a new client with basic information\n   */\n  createBasicClient(clientData) {\n    return this.http.post(`${this.baseUrl}/basic`, clientData);\n  }\n  /**\n   * Retrieve all clients from the system\n   */\n  getAllClients() {\n    return this.http.get(this.baseUrl);\n  }\n  /**\n   * Retrieve a specific client by ID\n   */\n  getClientById(id) {\n    return this.http.get(`${this.baseUrl}/${id}`);\n  }\n  /**\n   * Update an existing client's information\n   */\n  updateClient(id, clientData) {\n    return this.http.put(`${this.baseUrl}/${id}`, clientData);\n  }\n  /**\n   * Activate a client account\n   */\n  activateClient(id) {\n    return this.http.patch(`${this.baseUrl}/${id}/activate`, {});\n  }\n  /**\n   * Deactivate a client account\n   */\n  deactivateClient(id) {\n    return this.http.patch(`${this.baseUrl}/${id}/deactivate`, {});\n  }\n  /**\n   * Delete a client from the system\n   */\n  deleteClient(id) {\n    return this.http.delete(`${this.baseUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function ClientUseCases_Factory(t) {\n      return new (t || ClientUseCases)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ClientUseCases,\n      factory: ClientUseCases.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["ClientUseCases","constructor","http","baseUrl","createBasicClient","clientData","post","getAllClients","get","getClientById","id","updateClient","put","activateClient","patch","deactivateClient","deleteClient","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\familia\\Documents\\gitpro\\banking-example\\frontend\\banking-system\\src\\app\\application\\use-cases\\client-simple.use-cases.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Client, ClientBasicDto, ClientUpdateDto } from '../../domain/entities/client.entity';\r\n\r\n/**\r\n * Client Use Cases - Simplified version for demo\r\n */\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ClientUseCases {\r\n  private readonly baseUrl = 'http://localhost:8001/api/v1/client';\r\n\r\n  constructor(private readonly http: HttpClient) {}\r\n\r\n  /**\r\n   * Create a new client with basic information\r\n   */\r\n  createBasicClient(clientData: ClientBasicDto): Observable<Client> {\r\n    return this.http.post<Client>(`${this.baseUrl}/basic`, clientData);\r\n  }\r\n\r\n  /**\r\n   * Retrieve all clients from the system\r\n   */\r\n  getAllClients(): Observable<Client[]> {\r\n    return this.http.get<Client[]>(this.baseUrl);\r\n  }\r\n\r\n  /**\r\n   * Retrieve a specific client by ID\r\n   */\r\n  getClientById(id: number): Observable<Client> {\r\n    return this.http.get<Client>(`${this.baseUrl}/${id}`);\r\n  }\r\n\r\n  /**\r\n   * Update an existing client's information\r\n   */\r\n  updateClient(id: number, clientData: ClientUpdateDto): Observable<Client> {\r\n    return this.http.put<Client>(`${this.baseUrl}/${id}`, clientData);\r\n  }\r\n\r\n  /**\r\n   * Activate a client account\r\n   */\r\n  activateClient(id: number): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/${id}/activate`, {});\r\n  }\r\n\r\n  /**\r\n   * Deactivate a client account\r\n   */\r\n  deactivateClient(id: number): Observable<void> {\r\n    return this.http.patch<void>(`${this.baseUrl}/${id}/deactivate`, {});\r\n  }\r\n\r\n  /**\r\n   * Delete a client from the system\r\n   */\r\n  deleteClient(id: number): Observable<void> {\r\n    return this.http.delete<void>(`${this.baseUrl}/${id}`);\r\n  }\r\n}"],"mappings":";;AAKA;;;AAMA,OAAM,MAAOA,cAAc;EAGzBC,YAA6BC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,qCAAqC;EAEhB;EAEhD;;;EAGAC,iBAAiBA,CAACC,UAA0B;IAC1C,OAAO,IAAI,CAACH,IAAI,CAACI,IAAI,CAAS,GAAG,IAAI,CAACH,OAAO,QAAQ,EAAEE,UAAU,CAAC;EACpE;EAEA;;;EAGAE,aAAaA,CAAA;IACX,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAW,IAAI,CAACL,OAAO,CAAC;EAC9C;EAEA;;;EAGAM,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACR,IAAI,CAACM,GAAG,CAAS,GAAG,IAAI,CAACL,OAAO,IAAIO,EAAE,EAAE,CAAC;EACvD;EAEA;;;EAGAC,YAAYA,CAACD,EAAU,EAAEL,UAA2B;IAClD,OAAO,IAAI,CAACH,IAAI,CAACU,GAAG,CAAS,GAAG,IAAI,CAACT,OAAO,IAAIO,EAAE,EAAE,EAAEL,UAAU,CAAC;EACnE;EAEA;;;EAGAQ,cAAcA,CAACH,EAAU;IACvB,OAAO,IAAI,CAACR,IAAI,CAACY,KAAK,CAAO,GAAG,IAAI,CAACX,OAAO,IAAIO,EAAE,WAAW,EAAE,EAAE,CAAC;EACpE;EAEA;;;EAGAK,gBAAgBA,CAACL,EAAU;IACzB,OAAO,IAAI,CAACR,IAAI,CAACY,KAAK,CAAO,GAAG,IAAI,CAACX,OAAO,IAAIO,EAAE,aAAa,EAAE,EAAE,CAAC;EACtE;EAEA;;;EAGAM,YAAYA,CAACN,EAAU;IACrB,OAAO,IAAI,CAACR,IAAI,CAACe,MAAM,CAAO,GAAG,IAAI,CAACd,OAAO,IAAIO,EAAE,EAAE,CAAC;EACxD;;;uBApDWV,cAAc,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAdrB,cAAc;MAAAsB,OAAA,EAAdtB,cAAc,CAAAuB,IAAA;MAAAC,UAAA,EAFb;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}