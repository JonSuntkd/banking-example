{
	"info": {
		"_postman_id": "d0a25d8e-df30-4e6a-9eb7-214543231614",
		"name": "banking-account",
		"description": "Colección completa de pruebas para el microservicio banking-account con arquitectura hexagonal. Incluye todos los endpoints CRUD y validaciones de negocio. El endpoint GET /account devuelve cuentas en formato optimizado con clientName para evitar problemas de serialización Hibernate.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26168463"
	},
	"item": [
		{
			"name": "Crear Cuenta con Cliente (Nuevo)",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accountNumber\": \"478758\",\n    \"accountType\": \"Ahorro\",\n    \"initialBalance\": 2000,\n    \"status\": true,\n    \"clientName\": \"Jose Lema\"\n}"
				},
				"url": {
					"raw": "http://localhost:8002/account/with-client",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"account",
						"with-client"
					]
				},
				"description": "Crear cuenta con toda la información del cliente en el body. Busca por clientName en person → client → account. Valida cliente existente y cuenta no duplicada."
			},
			"response": []
		},
		{
			"name": "Obtener Todas las Cuentas",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8002/account",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"account"
					]
				},
				"description": "Obtiene todas las cuentas bancarias con el formato: accountNumber, accountType, initialBalance, status, clientName. Evita problemas de serialización de Hibernate."
			},
			"response": [
				{
					"name": "Ejemplo de respuesta exitosa",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:8002/account",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "8002",
							"path": [
								"account"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"accountNumber\": \"478758\",\n        \"accountType\": \"Ahorro\",\n        \"initialBalance\": 2000,\n        \"status\": true,\n        \"clientName\": \"Jose Lema\"\n    },\n    {\n        \"accountNumber\": \"123456789\",\n        \"accountType\": \"Corriente\",\n        \"initialBalance\": 1000.00,\n        \"status\": true,\n        \"clientName\": \"Juan Perez\"\n    }\n]"
				}
			]
		},
		{
			"name": "Actualizar Cuenta",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accountNumber\": \"123456789\",\n    \"accountType\": \"Credito\",\n    \"initialBalance\": 1500.00,\n    \"status\": true\n}"
				},
				"url": {
					"raw": "http://localhost:8002/account/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"account",
						"1"
					]
				},
				"description": "Actualiza los datos de una cuenta existente. Requiere el ID de la cuenta en la URL y valida que no se duplique el número de cuenta."
			},
			"response": []
		},
		{
			"name": "Eliminar Cuenta",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:8002/account/1",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8002",
					"path": [
						"account",
						"1"
					]
				},
				"description": "Elimina una cuenta del sistema por su ID único."
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}